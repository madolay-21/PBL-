#!/usr/bin/python3

import tkinter as tk
from tkinter import messagebox
from tkinter import filedialog
from PIL import Image, ImageTk
import socket

# Fungsi untuk melakukan scanning port
def portScanner(host, port, protocol):
    if protocol == 'TCP':
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    else:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        
    s.settimeout(5)
    
    result = s.connect_ex((host, port))
    s.close()
    
    return result

# Fungsi untuk mendapatkan nama service berdasarkan port dan protocol
def get_service_name(port, protocol):
    try:
        if protocol == 'TCP':
            return socket.getservbyport(port, 'tcp')
        else:
            return socket.getservbyport(port, 'udp')
    except:
        return 'UNKNOWN'

# Fungsi untuk menyimpan hasil scanning ke file
def save_results(results):
    file_path = filedialog.asksaveasfilename(defaultextension=".txt",
                                             filetypes=[("Text files", "*.txt"),
                                                        ("All files", "*.*")])
    if file_path:
        with open(file_path, 'w') as file:
            file.write('\n'.join(results))
        messagebox.showinfo("Saved", f"Hasil pemindaian berhasil disimpan ke {file_path}")

# Fungsi untuk memulai scanning saat tombol ditekan
def start_scan():
    host = ip_entry.get()
    
    try:
        ip = socket.gethostbyname(host)
    except socket.gaierror:
        messagebox.showerror("Invalid Hostname", "Hostname tidak valid atau tidak dapat ditemukan.")
        return
    
    selected_ports = [port for port, var in port_vars.items() if var.get()]
    
    results = [f"IP: {ip}"]
    
    for port in selected_ports:
        protocol = 'TCP' if port in tcp_ports else 'UDP'
        status = portScanner(ip, port, protocol)
        service_name = get_service_name(port, protocol)
        status_text = "[OPEN]" if status == 0 else "[CLOSED]"
        results.append(f"Port {port} [{protocol}] is {status_text} Service [{service_name}]")
    
    result_text.set("\n".join(results))
    
    if save_var.get():
        save_results(results)

# Daftar port yang umum digunakan
tcp_ports = [80, 443, 22, 445, 143]
udp_ports = [53]
all_ports = tcp_ports + udp_ports

# Membuat jendela utama
root = tk.Tk()
root.title("Port Scanner")

# Memuat gambar latar belakang
bg_image_path = "C:/Users/user/Pictures/sc.png"
bg_image = Image.open(bg_image_path)
bg_image = bg_image.resize((350, 500), Image.LANCZOS)  
bg_photo = ImageTk.PhotoImage(bg_image)

# Menambahkan kanvas untuk gambar latar belakang
canvas = tk.Canvas(root, width=350, height=500)
canvas.pack(fill="both", expand=True)
canvas.create_image(0, 0, image=bg_photo, anchor="nw")

# Menambahkan label dan input untuk nama domain
ip_label = tk.Label(root, text="Target:", bg="black", fg="white")
ip_entry = tk.Entry(root, width=30)

# Menambahkan checkbox untuk memilih port yang ingin di-scan
ch_port = tk.Label(root, text="Choose Port:", bg="black", fg="white")
port_vars = {port: tk.BooleanVar() for port in all_ports}
port_labels = {port: tk.Checkbutton(root, text=f"{port} ({'TCP' if port in tcp_ports else 'UDP'})", var=var, bg="black", fg="grey") for port, var in port_vars.items()}

# Menambahkan checkbox untuk memilih apakah hasil scan ingin disimpan
save_var = tk.BooleanVar()
save_checkbox = tk.Checkbutton(root, text="Save results to file", var=save_var, bg="black", fg="grey")

# Menambahkan tombol untuk memulai scanning
scan_button = tk.Button(root, text="Start Scan", command=start_scan)

# Menambahkan area teks untuk menampilkan hasil scanning
result_text = tk.StringVar()
result_label = tk.Label(root, textvariable=result_text, justify="left", bg="black", fg="green")

# Menempatkan widget di atas kanvas
canvas.create_window(175, 30, window=ip_label)
canvas.create_window(175, 60, window=ip_entry)

canvas.create_window(175, 90, window=ch_port)
for i, (port, label) in enumerate(port_labels.items()):
    canvas.create_window(175, 120 + i * 30, window=label)

canvas.create_window(175, 320, window=save_checkbox)
canvas.create_window(175, 360, window=scan_button)
canvas.create_window(175, 400, window=result_label)

# Menjalankan aplikasi
root.mainloop()
